#!/bin/bash
###############################################################################
# üîç SCRIPT DE VERIFICACI√ìN CORS Y WEBSOCKET - MITOSIS
# Verifica que la configuraci√≥n CORS est√© funcionando correctamente
###############################################################################

set -e

echo "üîç INICIANDO VERIFICACI√ìN CORS Y WEBSOCKET..."
echo "=============================================================="

# Cargar configuraci√≥n detectada si existe
if [ -f "/app/detected_config.env" ]; then
    source /app/detected_config.env
    echo "üìã Configuraci√≥n cargada desde detected_config.env"
    echo "   URL detectada: $DETECTED_FRONTEND_URL"
    echo "   M√©todo: $DETECTION_METHOD"
    echo "   √öltima configuraci√≥n exitosa: $LAST_SUCCESSFUL_START"
else
    echo "‚ö†Ô∏è No se encontr√≥ configuraci√≥n detectada, usando URL desde .env"
    DETECTED_FRONTEND_URL=$(grep "VITE_BACKEND_URL" /app/frontend/.env | cut -d'=' -f2 2>/dev/null || echo "")
fi

if [ -z "$DETECTED_FRONTEND_URL" ]; then
    echo "‚ùå No se pudo determinar URL frontend"
    exit 1
fi

echo "=============================================================="
echo "üéØ Verificando CORS para URL: $DETECTED_FRONTEND_URL"
echo "=============================================================="

# Test 1: Verificar endpoint de health con CORS
echo "1Ô∏è‚É£ Testing health endpoint con CORS..."
health_cors=$(curl -s -H "Origin: $DETECTED_FRONTEND_URL" \
    -H "Access-Control-Request-Method: GET" \
    -X OPTIONS "http://localhost:8001/api/health" 2>/dev/null || echo "error")

if echo "$health_cors" | grep -q "Access-Control-Allow-Origin\|200"; then
    echo "   ‚úÖ Health endpoint CORS: FUNCIONANDO"
else
    echo "   ‚ùå Health endpoint CORS: PROBLEMA"
    echo "      Respuesta: $health_cors"
fi

# Test 2: Verificar endpoint de chat con CORS
echo "2Ô∏è‚É£ Testing chat endpoint con CORS..."
chat_cors=$(curl -s -H "Origin: $DETECTED_FRONTEND_URL" \
    -H "Access-Control-Request-Method: POST" \
    -H "Access-Control-Request-Headers: Content-Type" \
    -X OPTIONS "http://localhost:8001/api/agent/chat" 2>/dev/null || echo "error")

if echo "$chat_cors" | grep -q "Access-Control-Allow-Origin\|200"; then
    echo "   ‚úÖ Chat endpoint CORS: FUNCIONANDO"
else
    echo "   ‚ùå Chat endpoint CORS: PROBLEMA"
    echo "      Respuesta: $chat_cors"
fi

# Test 3: Verificar WebSocket endpoint con CORS (CR√çTICO)
echo "3Ô∏è‚É£ Testing WebSocket endpoint con CORS..."
ws_cors=$(curl -s -H "Origin: $DETECTED_FRONTEND_URL" \
    "http://localhost:8001/api/socket.io/?EIO=4&transport=polling" 2>/dev/null || echo "error")

if echo "$ws_cors" | grep -q '"sid"'; then
    echo "   ‚úÖ WebSocket CORS: FUNCIONANDO PERFECTAMENTE"
    echo "      üéâ Este era el problema principal - AHORA EST√Å SOLUCIONADO"
else
    echo "   ‚ùå WebSocket CORS: PROBLEMA DETECTADO"
    echo "      ‚ö†Ô∏è Este es el error que estabas experimentando"
    echo "      Respuesta: $ws_cors"
fi

# Test 4: Verificar headers CORS espec√≠ficos
echo "4Ô∏è‚É£ Testing headers CORS espec√≠ficos..."
cors_headers=$(curl -s -I -H "Origin: $DETECTED_FRONTEND_URL" \
    -X OPTIONS "http://localhost:8001/api/socket.io/" 2>/dev/null || echo "error")

if echo "$cors_headers" | grep -q "Access-Control-Allow-Origin"; then
    echo "   ‚úÖ Headers CORS: CONFIGURADOS CORRECTAMENTE"
    allowed_origin=$(echo "$cors_headers" | grep "Access-Control-Allow-Origin" | cut -d' ' -f2- | tr -d '\r\n')
    echo "      üîó Origen permitido: $allowed_origin"
else
    echo "   ‚ùå Headers CORS: FALTAN O INCORRECTOS"
fi

# Test 5: Verificar configuraci√≥n actual en server.py
echo "5Ô∏è‚É£ Verificando configuraci√≥n actual en server.py..."
if grep -q "$DETECTED_FRONTEND_URL" /app/backend/server.py; then
    echo "   ‚úÖ URL detectada ENCONTRADA en server.py"
    echo "      üéØ La configuraci√≥n incluye tu URL espec√≠fica"
else
    echo "   ‚ö†Ô∏è URL espec√≠fica no encontrada, verificando wildcard..."
    if grep -q "https://\*\.preview\.emergentagent\.com" /app/backend/server.py; then
        echo "   ‚úÖ Wildcard CORS encontrado - deber√≠a funcionar"
    else
        echo "   ‚ùå Configuraci√≥n CORS problem√°tica"
    fi
fi

echo "=============================================================="
echo "üìä RESUMEN DE VERIFICACI√ìN"
echo "=============================================================="

# Contador de tests exitosos
tests_passed=0
total_tests=5

# Verificar cada test nuevamente para el resumen
if curl -s -H "Origin: $DETECTED_FRONTEND_URL" -X OPTIONS "http://localhost:8001/api/health" >/dev/null 2>&1; then
    ((tests_passed++))
fi

if curl -s -H "Origin: $DETECTED_FRONTEND_URL" -X OPTIONS "http://localhost:8001/api/agent/chat" >/dev/null 2>&1; then
    ((tests_passed++))
fi

if curl -s -H "Origin: $DETECTED_FRONTEND_URL" "http://localhost:8001/api/socket.io/?EIO=4&transport=polling" 2>/dev/null | grep -q '"sid"'; then
    ((tests_passed++))
    websocket_working=true
else
    websocket_working=false
fi

if curl -s -I -H "Origin: $DETECTED_FRONTEND_URL" -X OPTIONS "http://localhost:8001/api/socket.io/" 2>/dev/null | grep -q "Access-Control-Allow-Origin"; then
    ((tests_passed++))
fi

if grep -q "$DETECTED_FRONTEND_URL\|https://\*\.preview\.emergentagent\.com" /app/backend/server.py; then
    ((tests_passed++))
fi

echo "üìà Tests pasados: $tests_passed/$total_tests"
echo "üåê URL verificada: $DETECTED_FRONTEND_URL"

if [ $tests_passed -ge 4 ] && [ "$websocket_working" = true ]; then
    echo ""
    echo "üéâ ¬°√âXITO TOTAL! CORS Y WEBSOCKET FUNCIONANDO CORRECTAMENTE"
    echo "=============================================================="
    echo "‚úÖ Los errores de CORS que experimentabas EST√ÅN SOLUCIONADOS"
    echo "‚úÖ WebSocket puede conectarse desde tu frontend"
    echo "‚úÖ Todos los endpoints API son accesibles"
    echo "‚úÖ La configuraci√≥n es persistente para futuras ejecuciones"
    echo ""
    echo "üöÄ TU APLICACI√ìN EST√Å LISTA - NO M√ÅS ERRORES DE CORS"
    
    # Actualizar archivo de configuraci√≥n con √©xito
    echo "CORS_VERIFICATION_PASSED=true" >> /app/detected_config.env
    echo "LAST_CORS_CHECK=$(date -Iseconds)" >> /app/detected_config.env
    echo "TESTS_PASSED=$tests_passed/$total_tests" >> /app/detected_config.env
    
elif [ "$websocket_working" = false ]; then
    echo ""
    echo "‚ö†Ô∏è WEBSOCKET CORS A√öN TIENE PROBLEMAS"
    echo "=============================================================="
    echo "‚ùå El error de WebSocket que reportaste persiste"
    echo "üîß Ejecuta los siguientes comandos para investigar:"
    echo "   1. sudo supervisorctl restart backend"
    echo "   2. tail -20 /var/log/supervisor/backend.err.log"
    echo "   3. curl -v -H \"Origin: $DETECTED_FRONTEND_URL\" \"http://localhost:8001/api/socket.io/?EIO=4&transport=polling\""
    
else
    echo ""
    echo "‚ö†Ô∏è ALGUNOS TESTS FALLARON - REVISI√ìN NECESARIA"
    echo "=============================================================="
    echo "üîß Tests pasados: $tests_passed/$total_tests"
    echo "üìã Verifica los logs para m√°s detalles:"
    echo "   Backend: tail -20 /var/log/supervisor/backend.err.log"
    echo "   Frontend: tail -20 /var/log/supervisor/frontend.err.log"
fi

echo ""
echo "üîß SCRIPT DE VERIFICACI√ìN COMPLETADO"
echo "üìÖ $(date)"
echo "=============================================================="